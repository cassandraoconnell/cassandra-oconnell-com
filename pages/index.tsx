import { MongoClient } from "mongodb";
import { InferGetServerSidePropsType } from "next";
import Head from "next/head";
import { Divider } from "@/components/Divider/Divider";
import { Footer } from "@/sections/Footer/Footer";
import { Header } from "@/sections/Header/Header";
import { IntroSection } from "@/sections/Intro/Intro";
import { TechStackSection } from "@/sections/TechStack/TechStack";
import { TimelineSection } from "@/sections/Timeline/Timeline";
import { Discovery, Experience, Timeline } from "@/types/Timeline";
import "@/style/global.css";

export default function Home({
  data,
}: InferGetServerSidePropsType<typeof getServerSideProps>) {
  return (
    <>
      <Head>
        <title>{"Cassandra O'Connell"}</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />

        <link
          rel="icon"
          href="data:image/svg+xml,<svg xmlns=%22http://www.w3.org/2000/svg%22 viewBox=%220 0 100 100%22><text y=%22.9em%22 font-size=%2290%22>ðŸ‘‹</text></svg>"
        />
      </Head>
      <>
        <Header />
        <IntroSection />
        <Divider />
        <TechStackSection />
        <Divider />
        {data.timeline ? <TimelineSection timeline={data.timeline} /> : null}
        <Footer />
      </>
    </>
  );
}

export const getServerSideProps = async () => {
  const uri = process.env.MONGO_DB_CONNECTION_STRING;
  let timeline: Timeline | null = null;

  if (uri) {
    const client = new MongoClient(uri);

    try {
      const database = client.db("timeline");

      const discoveries = await database
        .collection<Discovery>("discoveries")
        .find({}, { sort: { start: -1 } })
        .toArray();

      const experiences = await database
        .collection<Experience>("experiences")
        .find({}, { sort: { start: -1 } })
        .toArray();

      timeline = {
        discoveries: discoveries.map(({ _id, ...discovery }) => discovery),
        experiences: experiences.map(({ _id, ...experience }) => experience),
      };
    } finally {
      await client.close();
    }
  }

  return {
    props: {
      data: {
        timeline,
      },
    },
  };
};
